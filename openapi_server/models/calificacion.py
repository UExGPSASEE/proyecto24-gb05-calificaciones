from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Calificacion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id_contenido=None, id_usuario=None, puntuacion=None, comentario=None, fecha=None):  # noqa: E501
        """Calificacion - a model defined in OpenAPI

        :param id_contenido: The id_contenido of this Calificacion.  # noqa: E501
        :type id_contenido: int
        :param id_usuario: The id_usuario of this Calificacion.  # noqa: E501
        :type id_usuario: int
        :param puntuacion: The puntuacion of this Calificacion.  # noqa: E501
        :type puntuacion: int
        :param comentario: The comentario of this Calificacion.  # noqa: E501
        :type comentario: str
        :param fecha: The fecha of this Calificacion.  # noqa: E501
        :type fecha: date
        """
        self.openapi_types = {
            'id_contenido': int,
            'id_usuario': int,
            'puntuacion': int,
            'comentario': str,
            'fecha': date
        }

        self.attribute_map = {
            'id_contenido': 'idContenido',
            'id_usuario': 'idUsuario',
            'puntuacion': 'puntuacion',
            'comentario': 'comentario',
            'fecha': 'fecha'
        }

        self._id_contenido = id_contenido
        self._id_usuario = id_usuario
        self._puntuacion = puntuacion
        self._comentario = comentario
        self._fecha = fecha

    @classmethod
    def from_dict(cls, dikt) -> 'Calificacion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Calificacion of this Calificacion.  # noqa: E501
        :rtype: Calificacion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id_contenido(self) -> int:
        """Gets the id_contenido of this Calificacion.


        :return: The id_contenido of this Calificacion.
        :rtype: int
        """
        return self._id_contenido

    @id_contenido.setter
    def id_contenido(self, id_contenido: int):
        """Sets the id_contenido of this Calificacion.


        :param id_contenido: The id_contenido of this Calificacion.
        :type id_contenido: int
        """

        self._id_contenido = id_contenido

    @property
    def id_usuario(self) -> int:
        """Gets the id_usuario of this Calificacion.


        :return: The id_usuario of this Calificacion.
        :rtype: int
        """
        return self._id_usuario

    @id_usuario.setter
    def id_usuario(self, id_usuario: int):
        """Sets the id_usuario of this Calificacion.


        :param id_usuario: The id_usuario of this Calificacion.
        :type id_usuario: int
        """

        self._id_usuario = id_usuario

    @property
    def puntuacion(self) -> int:
        """Gets the puntuacion of this Calificacion.


        :return: The puntuacion of this Calificacion.
        :rtype: int
        """
        return self._puntuacion

    @puntuacion.setter
    def puntuacion(self, puntuacion: int):
        """Sets the puntuacion of this Calificacion.


        :param puntuacion: The puntuacion of this Calificacion.
        :type puntuacion: int
        """
        if puntuacion is not None and puntuacion > 5:  # noqa: E501
            raise ValueError("Invalid value for `puntuacion`, must be a value less than or equal to `5`")  # noqa: E501
        if puntuacion is not None and puntuacion < 1:  # noqa: E501
            raise ValueError("Invalid value for `puntuacion`, must be a value greater than or equal to `1`")  # noqa: E501

        self._puntuacion = puntuacion

    @property
    def comentario(self) -> str:
        """Gets the comentario of this Calificacion.


        :return: The comentario of this Calificacion.
        :rtype: str
        """
        return self._comentario

    @comentario.setter
    def comentario(self, comentario: str):
        """Sets the comentario of this Calificacion.


        :param comentario: The comentario of this Calificacion.
        :type comentario: str
        """

        self._comentario = comentario

    @property
    def fecha(self) -> date:
        """Gets the fecha of this Calificacion.


        :return: The fecha of this Calificacion.
        :rtype: date
        """
        return self._fecha

    @fecha.setter
    def fecha(self, fecha: date):
        """Sets the fecha of this Calificacion.


        :param fecha: The fecha of this Calificacion.
        :type fecha: date
        """

        self._fecha = fecha
